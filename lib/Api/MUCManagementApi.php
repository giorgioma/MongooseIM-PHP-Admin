<?php
/**
 * MUCManagementApi
 * PHP version 5
 *
 * @category Class
 * @package  MongooseIM\Admin
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MongooseIM's REST API for backend administration
 *
 * Explore MongooseIM features using our REST API.  If you are familiar with the `mongooseimctl` command, the provided control functionality will seem very similar. The response objects are modeled on the `ejabberd_commands` entries and print-outs from `mongooseimctl`.  Please note that many of the fields such as **username** or **caller** expect a **JID** (jabber identifier, f.e. **alice@wonderland.com**). There are two types of **JIDs**:   * **bare JID** - consists of **username** and **domain name** (XMPP host, usually the one set in your `ejabberd.cfg` file).   * **full JID** - is a **bare JID** with online user's resource to uniquely identify user's connection (f.e. **alice@wonderland.com/resource**).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MongooseIM\Admin\Api;

use \MongooseIM\Admin\Configuration;
use \MongooseIM\Admin\ApiClient;
use \MongooseIM\Admin\ApiException;
use \MongooseIM\Admin\ObjectSerializer;

/**
 * MUCManagementApi Class Doc Comment
 *
 * @category Class
 * @package  MongooseIM\Admin
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MUCManagementApi
{

    /**
     * API Client
     *
     * @var \MongooseIM\Admin\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \MongooseIM\Admin\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\MongooseIM\Admin\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost:8088/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \MongooseIM\Admin\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \MongooseIM\Admin\ApiClient $apiClient set the API client
     *
     * @return MUCManagementApi
     */
    public function setApiClient(\MongooseIM\Admin\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation mucsXMPPHostPost
     *
     * 
     *
     * @param string $xmpp_host The XMPP host served by the server. (required)
     * @param \MongooseIM\Admin\Models\RoomDetails2 $room_details Details for the room to be created. (required)
     * @return void
     * @throws \MongooseIM\Admin\ApiException on non-2xx response
     */
    public function mucsXMPPHostPost($xmpp_host, $room_details)
    {
        list($response) = $this->mucsXMPPHostPostWithHttpInfo($xmpp_host, $room_details);
        return $response;
    }

    /**
     * Operation mucsXMPPHostPostWithHttpInfo
     *
     * 
     *
     * @param string $xmpp_host The XMPP host served by the server. (required)
     * @param \MongooseIM\Admin\Models\RoomDetails2 $room_details Details for the room to be created. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \MongooseIM\Admin\ApiException on non-2xx response
     */
    public function mucsXMPPHostPostWithHttpInfo($xmpp_host, $room_details)
    {
        // verify the required parameter 'xmpp_host' is set
        if ($xmpp_host === null) {
            throw new \InvalidArgumentException('Missing the required parameter $xmpp_host when calling mucsXMPPHostPost');
        }
        // verify the required parameter 'room_details' is set
        if ($room_details === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_details when calling mucsXMPPHostPost');
        }
        // parse inputs
        $resourcePath = "/mucs/{XMPPHost}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($xmpp_host !== null) {
            $resourcePath = str_replace(
                "{" . "XMPPHost" . "}",
                $this->apiClient->getSerializer()->toPathValue($xmpp_host),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($room_details)) {
            $_tempBody = $room_details;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/mucs/{XMPPHost}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation mucsXMPPHostRoomNameMessagesPost
     *
     * 
     *
     * @param string $xmpp_host The XMPP host served by the server. (required)
     * @param string $room_name The MUC Light room&#39;s **name** (i.e. **not** the room&#39;s JID) (required)
     * @param \MongooseIM\Admin\Models\ChatMessage1 $chat_message The message details (required)
     * @return void
     * @throws \MongooseIM\Admin\ApiException on non-2xx response
     */
    public function mucsXMPPHostRoomNameMessagesPost($xmpp_host, $room_name, $chat_message)
    {
        list($response) = $this->mucsXMPPHostRoomNameMessagesPostWithHttpInfo($xmpp_host, $room_name, $chat_message);
        return $response;
    }

    /**
     * Operation mucsXMPPHostRoomNameMessagesPostWithHttpInfo
     *
     * 
     *
     * @param string $xmpp_host The XMPP host served by the server. (required)
     * @param string $room_name The MUC Light room&#39;s **name** (i.e. **not** the room&#39;s JID) (required)
     * @param \MongooseIM\Admin\Models\ChatMessage1 $chat_message The message details (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \MongooseIM\Admin\ApiException on non-2xx response
     */
    public function mucsXMPPHostRoomNameMessagesPostWithHttpInfo($xmpp_host, $room_name, $chat_message)
    {
        // verify the required parameter 'xmpp_host' is set
        if ($xmpp_host === null) {
            throw new \InvalidArgumentException('Missing the required parameter $xmpp_host when calling mucsXMPPHostRoomNameMessagesPost');
        }
        // verify the required parameter 'room_name' is set
        if ($room_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_name when calling mucsXMPPHostRoomNameMessagesPost');
        }
        // verify the required parameter 'chat_message' is set
        if ($chat_message === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chat_message when calling mucsXMPPHostRoomNameMessagesPost');
        }
        // parse inputs
        $resourcePath = "/mucs/{XMPPHost}/{roomName}/messages";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($xmpp_host !== null) {
            $resourcePath = str_replace(
                "{" . "XMPPHost" . "}",
                $this->apiClient->getSerializer()->toPathValue($xmpp_host),
                $resourcePath
            );
        }
        // path params
        if ($room_name !== null) {
            $resourcePath = str_replace(
                "{" . "roomName" . "}",
                $this->apiClient->getSerializer()->toPathValue($room_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($chat_message)) {
            $_tempBody = $chat_message;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/mucs/{XMPPHost}/{roomName}/messages'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation mucsXMPPHostRoomNameNicknameDelete
     *
     * 
     *
     * @param string $xmpp_host The XMPP host served by the server. (required)
     * @param string $room_name The MUC Light room&#39;s **name** (i.e. **not** the room&#39;s JID) (required)
     * @param string $nickname The user&#39;s nickname for the given room (required)
     * @return void
     * @throws \MongooseIM\Admin\ApiException on non-2xx response
     */
    public function mucsXMPPHostRoomNameNicknameDelete($xmpp_host, $room_name, $nickname)
    {
        list($response) = $this->mucsXMPPHostRoomNameNicknameDeleteWithHttpInfo($xmpp_host, $room_name, $nickname);
        return $response;
    }

    /**
     * Operation mucsXMPPHostRoomNameNicknameDeleteWithHttpInfo
     *
     * 
     *
     * @param string $xmpp_host The XMPP host served by the server. (required)
     * @param string $room_name The MUC Light room&#39;s **name** (i.e. **not** the room&#39;s JID) (required)
     * @param string $nickname The user&#39;s nickname for the given room (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \MongooseIM\Admin\ApiException on non-2xx response
     */
    public function mucsXMPPHostRoomNameNicknameDeleteWithHttpInfo($xmpp_host, $room_name, $nickname)
    {
        // verify the required parameter 'xmpp_host' is set
        if ($xmpp_host === null) {
            throw new \InvalidArgumentException('Missing the required parameter $xmpp_host when calling mucsXMPPHostRoomNameNicknameDelete');
        }
        // verify the required parameter 'room_name' is set
        if ($room_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_name when calling mucsXMPPHostRoomNameNicknameDelete');
        }
        // verify the required parameter 'nickname' is set
        if ($nickname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nickname when calling mucsXMPPHostRoomNameNicknameDelete');
        }
        // parse inputs
        $resourcePath = "/mucs/{XMPPHost}/{roomName}/{nickname}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($xmpp_host !== null) {
            $resourcePath = str_replace(
                "{" . "XMPPHost" . "}",
                $this->apiClient->getSerializer()->toPathValue($xmpp_host),
                $resourcePath
            );
        }
        // path params
        if ($room_name !== null) {
            $resourcePath = str_replace(
                "{" . "roomName" . "}",
                $this->apiClient->getSerializer()->toPathValue($room_name),
                $resourcePath
            );
        }
        // path params
        if ($nickname !== null) {
            $resourcePath = str_replace(
                "{" . "nickname" . "}",
                $this->apiClient->getSerializer()->toPathValue($nickname),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/mucs/{XMPPHost}/{roomName}/{nickname}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation mucsXMPPHostRoomNameParticipantsPost
     *
     * 
     *
     * @param string $xmpp_host The XMPP host served by the server. (required)
     * @param string $room_name The MUC Light room&#39;s **name** (i.e. **not** the room&#39;s JID) (required)
     * @param \MongooseIM\Admin\Models\Invite1 $invite The invite itself (required)
     * @return void
     * @throws \MongooseIM\Admin\ApiException on non-2xx response
     */
    public function mucsXMPPHostRoomNameParticipantsPost($xmpp_host, $room_name, $invite)
    {
        list($response) = $this->mucsXMPPHostRoomNameParticipantsPostWithHttpInfo($xmpp_host, $room_name, $invite);
        return $response;
    }

    /**
     * Operation mucsXMPPHostRoomNameParticipantsPostWithHttpInfo
     *
     * 
     *
     * @param string $xmpp_host The XMPP host served by the server. (required)
     * @param string $room_name The MUC Light room&#39;s **name** (i.e. **not** the room&#39;s JID) (required)
     * @param \MongooseIM\Admin\Models\Invite1 $invite The invite itself (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \MongooseIM\Admin\ApiException on non-2xx response
     */
    public function mucsXMPPHostRoomNameParticipantsPostWithHttpInfo($xmpp_host, $room_name, $invite)
    {
        // verify the required parameter 'xmpp_host' is set
        if ($xmpp_host === null) {
            throw new \InvalidArgumentException('Missing the required parameter $xmpp_host when calling mucsXMPPHostRoomNameParticipantsPost');
        }
        // verify the required parameter 'room_name' is set
        if ($room_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_name when calling mucsXMPPHostRoomNameParticipantsPost');
        }
        // verify the required parameter 'invite' is set
        if ($invite === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invite when calling mucsXMPPHostRoomNameParticipantsPost');
        }
        // parse inputs
        $resourcePath = "/mucs/{XMPPHost}/{roomName}/participants";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($xmpp_host !== null) {
            $resourcePath = str_replace(
                "{" . "XMPPHost" . "}",
                $this->apiClient->getSerializer()->toPathValue($xmpp_host),
                $resourcePath
            );
        }
        // path params
        if ($room_name !== null) {
            $resourcePath = str_replace(
                "{" . "roomName" . "}",
                $this->apiClient->getSerializer()->toPathValue($room_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($invite)) {
            $_tempBody = $invite;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/mucs/{XMPPHost}/{roomName}/participants'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
